<?php

/**
 * Return the list of hook_nodeapi() operations that we want to
 * support on a node type by node type basis.
 */
function nodetype_trigger_nodeapi_ops() {
  static $ops = array(
    'insert',
  	'update',
    'delete',
  );

  return $ops;
}

/**
 * Return the translatable string for each node type trigger
 * keyed by the hook_nodeapi() operation that it mimics.  Use
 * %type where you want to see the node type on the
 * admin/build/trigger/nodetype_trigger page.
 */
function nodetype_trigger_runs_when_text($op) {
  static $text = array(
    'insert' => 'After nodes of type %type are created',
  	'update' => 'After nodes of type %type are updated',
    'delete' => 'Before nodes of type %type are deleted',
  );

  return array_key_exists($op, $text) ? $text[$op] : '';
}

/**
 * Implementation of hook_help().
 */
function nodetype_trigger_help($section) {
  $output ="";
  switch ($section) {
    case 'admin/help#nodetype_trigger':
      $output = t('This module provides additional triggers that launch based on the node type.');
      break;
    case 'admin/settings/nodetype-trigger':
      $output = t('Set the node types for triggers. Each node type can then have After creation and After deleting -triggers.');
      break;
    case 'admin/build/trigger/nodetype_trigger':
      $explanation = '<p>'. t('Triggers are system events, such as when new content is added or when a user logs in. Trigger module combines these triggers with actions (functional tasks), such as unpublishing content or e-mailing an administrator. The <a href="@url">Actions settings page</a> contains a list of existing actions and provides the ability to create and configure additional actions.', array('@url' => url('admin/settings/actions'))) .'</p>';
      $output = $explanation . '<p>' . t('Below you can assign actions to run when certain content-related triggers happen for a given node type. For example, you could send an e-mail to an administrator when a page node is created or updated.') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function nodetype_trigger_menu() {
  $items = array();

  $items['admin/settings/nodetype-trigger'] = array(
    'title' => t('Node type trigger settings'),
    'description' => t('Administer node type triggers'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodetype_trigger_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Settings for the nodetype_trigger module.
 */
function nodetype_trigger_config_form() {
  $form = array();

  // gets array of node types in the form: array('page' => 'Page', 'tyontekija' => 'Työntekijä' ...
  $options = node_get_types('names');
  $defaults = variable_get('nodetype_trigger_node_types_for_triggers', array());

  $form['nodetype_trigger_node_types_for_triggers'] = array(
    '#title' => 'Node types',
    '#type' => 'checkboxes',
    '#description' => t('Check the node types you want to create node type triggers for'),
    '#options' => $options,
    '#default_value' => $defaults,
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_hook_info().
 */
function nodetype_trigger_hook_info() {
  $triggers = array();

  $options = node_get_types('names');
  $types = variable_get('nodetype_trigger_node_types_for_triggers', array());

  if (!empty($types)) {
    // Create dropdown lists for associating triggers with actions.
    // Dropdown lists will be shown in admin/build/trigger/nodetype_trigger.
    foreach ($types as $type) {
      if ($type) {
        foreach (nodetype_trigger_nodeapi_ops() as $op) {
          $triggers['nodetype_trigger']['nodetype_trigger'][$op . '-' . $type] =
            array('runs when' => t(nodetype_trigger_runs_when_text($op), array('%type' => $options[$type])));
        }
      }
    }
  }

  return $triggers;
}

/**
 * Implementation of hook_nodeapi().
 *
 * Perform a check whether the node being operated on is one of the
 * configured node types for our triggers.  If so then we run our
 * trigger.
 */
function nodetype_trigger_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (in_array($op, nodetype_trigger_nodeapi_ops())) {
    $types = variable_get('nodetype_trigger_node_types_for_triggers', array());
    if (in_array($node->type, $types)) {
      nodetype_trigger_nodetype_trigger($op . '-' . $node->type, $node);
    }
  }
}

/**
 * Perform actions related to the trigger.
 */
function nodetype_trigger_nodetype_trigger($op, $node) {
  $aids = _trigger_get_hook_aids('nodetype_trigger', $op);
  $context = array(
    'hook' => 'nodetype_trigger',
    'op' => $op,
    'node' => $node,
  );
  actions_do(array_keys($aids), $node, $context);
}

/**
 * Implementation of hook_action_info_alter().
 *
 * For any actions that support the hook_nodeapi() operations
 * that we want to mimic, make sure we put an entry in the
 * action info for our triggers.
 *
 * Note that our triggers are named op-nodetype where
 * op is the name of the hook_nodeapi() operation.
 */
function nodetype_trigger_action_info_alter(&$info) {
  $types = variable_get('nodetype_trigger_node_types_for_triggers', array());
  foreach (array_keys($info) as $key) {
    if (is_array($info[$key]['hooks']['nodeapi'])) {
      foreach (nodetype_trigger_nodeapi_ops() as $op) {
        if (in_array($op, $info[$key]['hooks']['nodeapi'])) {
          foreach ($types as $type) {
            $info[$key]['hooks']['nodetype_trigger'][] = $op . '-' . $type;
          }
        }
      }
    }
  }
}
